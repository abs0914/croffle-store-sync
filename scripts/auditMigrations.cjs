#!/usr/bin/env node

/**
 * Migration Audit Script
 * 
 * This script audits migration files to identify those that contain
 * data seeding or population that could interfere with fresh data uploads.
 */

const fs = require('fs');
const path = require('path');

const MIGRATIONS_DIR = path.join(__dirname, '..', 'supabase', 'migrations');

// Patterns that indicate data seeding/population
const DATA_SEEDING_PATTERNS = [
  /INSERT INTO.*recipe_templates/i,
  /INSERT INTO.*recipes/i,
  /INSERT INTO.*inventory_stock/i,
  /INSERT INTO.*product_catalog/i,
  /INSERT INTO.*commissary_inventory/i,
  /INSERT INTO.*recipe_template_ingredients/i,
  /INSERT INTO.*recipe_ingredients/i,
  /INSERT INTO.*product_ingredients/i,
  /INSERT INTO.*standardized_ingredients/i,
  /VALUES.*\('.*croissant.*'\)/i,
  /VALUES.*\('.*tiramisu.*'\)/i,
  /VALUES.*\('.*chocolate.*'\)/i,
  /VALUES.*\('.*whipped cream.*'\)/i,
  /VALUES.*\('.*coffee.*'\)/i,
  // Bulk data insertion patterns
  /CROSS JOIN.*VALUES/i,
  /SELECT.*FROM.*VALUES/i,
];

// Patterns for migrations that should be preserved (structure only)
const PRESERVE_PATTERNS = [
  /CREATE TABLE/i,
  /ALTER TABLE/i,
  /CREATE INDEX/i,
  /CREATE FUNCTION/i,
  /CREATE TRIGGER/i,
  /DROP TABLE/i,
  /DROP INDEX/i,
];

function auditMigrations() {
  console.log('🔍 Auditing migration files for data seeding...\n');
  
  if (!fs.existsSync(MIGRATIONS_DIR)) {
    console.error('❌ Migrations directory not found:', MIGRATIONS_DIR);
    return;
  }
  
  const migrationFiles = fs.readdirSync(MIGRATIONS_DIR)
    .filter(file => file.endsWith('.sql'))
    .sort();
  
  const problematicMigrations = [];
  const cleanMigrations = [];
  
  migrationFiles.forEach(filename => {
    const filepath = path.join(MIGRATIONS_DIR, filename);
    const content = fs.readFileSync(filepath, 'utf8');
    
    const hasDataSeeding = DATA_SEEDING_PATTERNS.some(pattern => 
      pattern.test(content)
    );
    
    const hasStructureChanges = PRESERVE_PATTERNS.some(pattern =>
      pattern.test(content)
    );
    
    if (hasDataSeeding) {
      problematicMigrations.push({
        filename,
        filepath,
        hasStructureChanges,
        content: content.substring(0, 200) + '...'
      });
    } else {
      cleanMigrations.push(filename);
    }
  });
  
  // Report findings
  console.log(`📊 Migration Audit Results:`);
  console.log(`   Total migrations: ${migrationFiles.length}`);
  console.log(`   Clean migrations: ${cleanMigrations.length}`);
  console.log(`   Problematic migrations: ${problematicMigrations.length}\n`);
  
  if (problematicMigrations.length > 0) {
    console.log('⚠️  Migrations with data seeding:');
    console.log('=====================================\n');
    
    problematicMigrations.forEach((migration, index) => {
      console.log(`${index + 1}. ${migration.filename}`);
      console.log(`   Structure changes: ${migration.hasStructureChanges ? 'Yes' : 'No'}`);
      console.log(`   Preview: ${migration.content.split('\n')[0]}...`);
      console.log('');
    });
    
    console.log('\n📝 Recommendations:');
    console.log('===================');
    console.log('1. Review each problematic migration');
    console.log('2. For migrations with structure changes: separate structure from data');
    console.log('3. For data-only migrations: consider removing or commenting out');
    console.log('4. Run the complete system reset migration to clear existing data');
    console.log('5. Test fresh data upload after cleanup\n');
  } else {
    console.log('✅ No problematic migrations found!\n');
  }
  
  // Generate cleanup recommendations
  generateCleanupScript(problematicMigrations);
}

function generateCleanupScript(problematicMigrations) {
  if (problematicMigrations.length === 0) return;
  
  const cleanupScript = `#!/bin/bash
# Migration Cleanup Script
# Generated by migration audit

echo "🧹 Starting migration cleanup..."

# Backup problematic migrations
mkdir -p migration_backups
${problematicMigrations.map(m => 
  `cp "supabase/migrations/${m.filename}" "migration_backups/${m.filename}.backup"`
).join('\n')}

echo "✅ Backups created in migration_backups/"
echo "⚠️  Review each migration manually before making changes"
echo "📋 Consider running the complete system reset migration instead"
`;

  fs.writeFileSync(path.join(__dirname, 'cleanup_migrations.sh'), cleanupScript);
  console.log('📄 Generated cleanup script: scripts/cleanup_migrations.sh');
}

// Run the audit
auditMigrations();
