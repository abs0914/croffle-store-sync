import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

/**
 * Clean up auto-generated stock orders that may have been created
 * This is a one-time cleanup function to remove spam auto-orders
 */
export const cleanupAutoGeneratedOrders = async (): Promise<void> => {
  try {
    console.log('Starting cleanup of auto-generated orders...');

    // Get auto-generated orders
    const { data: autoOrders, error: fetchError } = await supabase
      .from('stock_orders')
      .select('id, order_number, notes')
      .or('order_number.like.AUTO-%,notes.ilike.%auto-generated%')
      .eq('status', 'requested'); // Only clean up requested orders

    if (fetchError) {
      console.error('Error fetching auto orders:', fetchError);
      return;
    }

    if (!autoOrders || autoOrders.length === 0) {
      console.log('No auto-generated orders found to clean up');
      return;
    }

    console.log(`Found ${autoOrders.length} auto-generated orders to clean up`);

    // Delete associated order items first
    const orderIds = autoOrders.map(order => order.id);
    
    const { error: itemsDeleteError } = await supabase
      .from('stock_order_items')
      .delete()
      .in('stock_order_id', orderIds);

    if (itemsDeleteError) {
      console.error('Error deleting order items:', itemsDeleteError);
      return;
    }

    // Delete the orders
    const { error: ordersDeleteError } = await supabase
      .from('stock_orders')
      .delete()
      .in('id', orderIds);

    if (ordersDeleteError) {
      console.error('Error deleting orders:', ordersDeleteError);
      return;
    }

    console.log(`Successfully cleaned up ${autoOrders.length} auto-generated orders`);
    toast.success(`Cleaned up ${autoOrders.length} auto-generated orders`);

  } catch (error) {
    console.error('Error during cleanup:', error);
    toast.error('Failed to clean up auto-generated orders');
  }
};

/**
 * Check if there are any auto-generated orders that need cleanup
 */
export const hasAutoGeneratedOrders = async (): Promise<number> => {
  try {
    const { count, error } = await supabase
      .from('stock_orders')
      .select('id', { count: 'exact', head: true })
      .or('order_number.like.AUTO-%,notes.ilike.%auto-generated%')
      .eq('status', 'requested');

    if (error) {
      console.error('Error checking auto orders count:', error);
      return 0;
    }

    return count || 0;
  } catch (error) {
    console.error('Error in hasAutoGeneratedOrders:', error);
    return 0;
  }
};